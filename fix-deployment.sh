#!/bin/bash

# Fix deployment configuration for api.pfandler.fabiotietz.com
# This script fixes the database connection issues on the deployed server

echo "ðŸ”§ Fixing Pfandler Backend Deployment Configuration"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if running as root or with sudo
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}This script must be run with sudo or as root${NC}"
   exit 1
fi

echo -e "${YELLOW}Step 1: Backup current configuration${NC}"
cp config/production.yaml config/production.yaml.backup.$(date +%Y%m%d_%H%M%S)

echo -e "${YELLOW}Step 2: Update production.yaml with correct values${NC}"
cat > config/production.yaml << 'EOF'
# Production configuration for api.pfandler.fabiotietz.com
# Auto-generated by fix-deployment.sh

apiServer:
  port: 8080
  publicHost: api.pfandler.fabiotietz.com
  publicPort: 443
  publicScheme: https

insightsServer:
  port: 8081
  publicHost: api.pfandler.fabiotietz.com
  publicPort: 443
  publicScheme: https

webServer:
  port: 8082
  publicHost: api.pfandler.fabiotietz.com
  publicPort: 443
  publicScheme: https

# Database configuration for local PostgreSQL
database:
  host: localhost
  port: 5432
  name: pfandler_production
  user: pfandler_user
  requireSsl: false

# Redis configuration
redis:
  enabled: true
  host: localhost
  port: 6379
  requireSsl: false

maxRequestSize: 524288

sessionLogs:
  consoleEnabled: true
  persistentEnabled: true
  consoleLogFormat: json

futureCallExecutionEnabled: true
EOF

echo -e "${YELLOW}Step 3: Create .env.production file if it doesn't exist${NC}"
if [ ! -f .env.production ]; then
  cat > .env.production << 'EOF'
# Production environment variables
DB_PASSWORD=ChangeThisToSecurePassword123!
REDIS_PASSWORD=ChangeThisToSecureRedisPassword456!
API_SECRET=GenerateRandomAPISecret789
SERVICE_SECRET=GenerateRandomServiceSecret012
EOF
  chmod 600 .env.production
  echo -e "${GREEN}Created .env.production - PLEASE UPDATE THE PASSWORDS!${NC}"
else
  echo -e "${GREEN}.env.production already exists${NC}"
fi

echo -e "${YELLOW}Step 4: Setup PostgreSQL database${NC}"
# Check if PostgreSQL is installed
if ! command -v psql &> /dev/null; then
    echo -e "${YELLOW}Installing PostgreSQL...${NC}"
    apt-get update
    apt-get install -y postgresql postgresql-contrib
fi

# Start PostgreSQL if not running
systemctl start postgresql
systemctl enable postgresql

echo -e "${YELLOW}Step 5: Create database and user${NC}"
sudo -u postgres psql << EOF
-- Create user if not exists
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'pfandler_user') THEN
    CREATE USER pfandler_user WITH PASSWORD 'pfandler_temp_password';
  END IF;
END\$\$;

-- Create database if not exists
SELECT 'CREATE DATABASE pfandler_production OWNER pfandler_user'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'pfandler_production')\gexec

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE pfandler_production TO pfandler_user;
EOF

echo -e "${YELLOW}Step 6: Install and configure Redis${NC}"
if ! command -v redis-server &> /dev/null; then
    echo -e "${YELLOW}Installing Redis...${NC}"
    apt-get install -y redis-server
fi

# Configure Redis with password (update redis.conf)
sed -i 's/^# requirepass .*/requirepass pfandler_temp_redis_password/' /etc/redis/redis.conf
systemctl restart redis-server
systemctl enable redis-server

echo -e "${YELLOW}Step 7: Run database migrations${NC}"
if [ -f "bin/main.dart" ]; then
  dart bin/main.dart --mode production --apply-migrations || echo -e "${YELLOW}Migrations may need manual intervention${NC}"
fi

echo -e "${YELLOW}Step 8: Restart the application${NC}"
# If using systemd service
if systemctl list-units --full -all | grep -Fq "pfandler-backend.service"; then
  systemctl restart pfandler-backend
  echo -e "${GREEN}Service restarted${NC}"
else
  echo -e "${YELLOW}Please restart your application manually${NC}"
fi

echo ""
echo -e "${GREEN}âœ… Configuration fixed!${NC}"
echo ""
echo -e "${RED}IMPORTANT NEXT STEPS:${NC}"
echo "1. Update the passwords in .env.production file"
echo "2. Update the database password:"
echo "   sudo -u postgres psql -c \"ALTER USER pfandler_user PASSWORD 'YourNewSecurePassword';\""
echo "3. Update Redis password in /etc/redis/redis.conf"
echo "4. Restart the application after updating passwords"
echo ""
echo "Test the API with:"
echo "curl https://api.pfandler.fabiotietz.com/greeting/hello?name=World"